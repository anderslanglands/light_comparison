#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    renderSettingsPrimPath = "/Render/karma_rendersettings"
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Sphere "sphere1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    rel material:binding = </materials/usdpreviewsurface1>
    double radius = 1
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Xform "cameras"
{
    def Camera "camera2" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (1, 1000000)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale = 1
        bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.11787187
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 6, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "materials"
{
    def Material "usdpreviewsurface1"
    {
        token outputs:displacement.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:displacement>
        token outputs:surface.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:surface>

        def Shader "usdpreviewsurface1"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoatRoughness = 0
            color3f inputs:diffuseColor = (0.602, 0.602, 0.602)
            float inputs:roughness = 0
            token outputs:displacement
            token outputs:surface
        }
    }
}

def Scope "Render"
{
    def Scope "Products"
    {
        def Scope "Vars"
        {
            def RenderVar "RGBA"
            {
                custom string arnold:filter = "box_filter"
                uniform token dataType = "color4f"
                custom token driver:parameters:aov:format = "color4f"
                custom string driver:parameters:aov:name = "RGBA"
                uniform string sourceName = "RGBA"
                uniform token sourceType = "raw"
            }

            def RenderVar "Beauty" (
                prepend apiSchemas = ["KarmaAOVSettingsAPI"]
            )
            {
                token dataType = "color4f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                bool driver:parameters:aov:cryptomatte = 0
                string driver:parameters:aov:filter = '["ubox",{}]'
                custom token driver:parameters:aov:format = "color4h"
                custom bool driver:parameters:aov:multiSampled = 1
                custom string driver:parameters:aov:name = "C"
                string sourceName = "C.*"
                token sourceType = "lpe"
            }

            def RenderVar "Ci"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "ci"
                string sourceName = "Ci"
                token sourceType = "raw"
            }

            def RenderVar "a"
            {
                token dataType = "float"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "a"
                string sourceName = "a"
                token sourceType = "raw"
            }

            def RenderVar "Nn"
            {
                token dataType = "float3"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "nn"
                string sourceName = "Nn"
                token sourceType = "raw"
            }

            def RenderVar "u"
            {
                token dataType = "float"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "u"
                string sourceName = "u"
                token sourceType = "raw"
            }

            def RenderVar "v"
            {
                token dataType = "float"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "v"
                string sourceName = "v"
                token sourceType = "raw"
            }

            def RenderVar "beauty"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "beauty"
                string sourceName = "C[DS]*[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "directDiffuse"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "directdiffuse"
                string sourceName = "C<RD>[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "directSpecular"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "directspecular"
                string sourceName = "C<RS>[<L.>O]"
                token sourceType = "lpe"
            }

            def RenderVar "__depth"
            {
                token dataType = "color3f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom string driver:parameters:aov:filter = "box"
                custom token driver:parameters:aov:format = "float3"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "__depth"
                string sourceName = "__depth"
                token sourceType = "raw"
            }
        }

        def RenderProduct "renderproduct"
        {
            custom string arnold:driver = "driver_exr"
            token aspectRatioConformPolicy = "expandAperture"
            float4 dataWindowNDC = (0, 0, 1, 1)
            custom string driver:parameters:artist = ""
            custom string driver:parameters:comment = ""
            custom string driver:parameters:hostname = ""
            custom int driver:parameters:openexr:asrgba = 1
            custom string driver:parameters:openexr:autocrop = "false"
            custom string driver:parameters:OpenEXR:compression = "zips"
            custom string driver:parameters:openexr:exrcompression = "zips"
            custom string driver:parameters:openexr:exrpixeltype = "half"
            custom string driver:parameters:openexr:storage = "scanline"
            custom int includeAovs = 1
            bool instantaneousShutter = 0
            rel orderedVars = [
                </Render/Products/Vars/Beauty>,
                </Render/Products/Vars/Ci>,
                </Render/Products/Vars/Nn>,
                </Render/Products/Vars/RGBA>,
                </Render/Products/Vars/__depth>,
                </Render/Products/Vars/a>,
                </Render/Products/Vars/beauty>,
                </Render/Products/Vars/directDiffuse>,
                </Render/Products/Vars/directSpecular>,
                </Render/Products/Vars/u>,
                </Render/Products/Vars/v>,
            ]
            float pixelAspectRatio = 1
            token productName.timeSamples = {
                1: "D:/code_win/light_comparison/render/light_comparison.hdprmanrendersettings2.0001.exr",
            }
            token productType = "openexr"
            int2 resolution = (1280, 720)
        }
    }

    def RenderSettings "arnold_rendersettings"
    {
        custom int arnold:global:AA_samples = 6
        custom int arnold:global:AA_seed
        int arnold:global:AA_seed.timeSamples = {
            1: 1,
        }
        token aspectRatioConformPolicy = "expandAperture"
        rel camera = </cameras/camera2>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = </Render/Products/renderproduct>
        int2 resolution = (1024, 1024)
    }

    def RenderSettings "karma_rendersettings" (
        prepend apiSchemas = ["KarmaRendererSettingsAPI"]
    )
    {
        token aspectRatioConformPolicy = "expandAperture"
        rel camera = </cameras/camera2>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default", "render"]
        bool instantaneousShutter = 0
        bool karma:global:abortmissingtexture = 0
        bool karma:global:autoheadlight = 1
        token karma:global:bucketorder = "Middle"
        int karma:global:bucketsize = 32
        float karma:global:cacheratio = 0.25
        int karma:global:cachesize = 1000
        float karma:global:colorlimit = 10
        float karma:global:colorlimitindirect = 10
        bool karma:global:colorlimitindlinked = 1
        bool karma:global:constrainmaxrough = 1
        token karma:global:convergence_mode = "Variance"
        float karma:global:dicingqualityscale = 1
        string karma:global:diffusecomponents = "diffuse"
        bool karma:global:enable_dof = 1
        string karma:global:engine = "cpu"
        string karma:global:exportcomponents = "diffuse reflect coat refract volume sss"
        bool karma:global:guiding_enable = 0
        int karma:global:guiding_samples = 64
        string karma:global:imagefilter = "[]"
        token karma:global:imagemode = "Progressive"
        token karma:global:light_sampling_mode = "Light Tree"
        float karma:global:light_sampling_quality = 1
        float karma:global:offscreenquality = 0.1
        int karma:global:pathtracedsamples = 128
        string karma:global:pixelfilter = "gauss"
        float karma:global:pixelfiltersize = 2
        string karma:global:pixeloracle = '["variance", {"variance": 0.01, "plane": "C", "minrays": 3, "ociomode": 0, "ociodisplay": "ACES", "ocioview": "sRGB", "ociocolorspace": "default"}]'
        int karma:global:randomseed = 0
        float karma:global:raybias = 0.001
        string karma:global:refractcomponents = "refract"
        int karma:global:russianroulette_cutoff = 2
        string karma:global:samplefilter = "[]"
        int karma:global:samplesperpixel = 9
        int karma:global:screendoorlimit = 4
        float karma:global:shadingqualitymult = 1
        string karma:global:ssscomponents = "sss"
        bool karma:global:usecacheratio = 1
        string karma:global:volumecomponents = "volume"
        custom bool karma:object:causticsenable = 0
        custom float karma:object:causticsroughnessclamp = 0.2
        custom token karma:object:cull_backface = "Off"
        custom int karma:object:curve_basis = 0
        custom token karma:object:curve_style = "Rounded Curves"
        custom float karma:object:diffuselimit = 1
        custom float karma:object:diffusequality = 1
        custom int karma:object:geosamples = 2
        custom int karma:object:instance_samples = 2
        custom token karma:object:instance_vblur = "No Velocity Blur"
        custom bool karma:object:mblur = 1
        custom token karma:object:point_style = "Spheres"
        custom float karma:object:reflectlimit = 4
        custom float karma:object:reflectquality = 1
        custom float karma:object:refractlimit = 4
        custom float karma:object:refractquality = 1
        custom float karma:object:ssslimit = 0
        custom float karma:object:sssquality = 1
        custom int karma:object:varianceaa_maxsamples = 9
        custom int karma:object:varianceaa_minsamples = 1
        custom float karma:object:varianceaa_thresh = 0.01
        custom token karma:object:vblur = "No Velocity Blur"
        custom float karma:object:volumelimit = 0
        custom float karma:object:volumequality = 1
        custom float karma:object:volumesteprate = 0.25
        custom float karma:object:volumevblurscale = 1
        custom int karma:object:xformsamples = 2
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = </Render/Products/renderproduct>
        int2 resolution = (1024, 1024)
    }

    def RenderSettings "rendersettings"
    {
        token aspectRatioConformPolicy = "expandAperture"
        rel camera = None
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = </Render/Products/renderproduct>
        int2 resolution = (1280, 720)
        custom string ri:bucket:order = "horizontal"
        custom float2 ri:bucket:orderorigin = (-1, -1)
        custom int ri:checkpoint:asfinal = 0
        custom string ri:checkpoint:command = ""
        custom string ri:checkpoint:exitat = ""
        custom string ri:checkpoint:interval = ""
        custom int ri:checkpoint:keepfiles = 0
        custom float ri:curve:minwidth = 0
        custom float ri:dice:offscreenmultiplier = 1
        custom string ri:displayfilter0:name = "None"
        custom string ri:displayfilter1:name = "None"
        custom string ri:displayfilter2:name = "None"
        custom string ri:displayfilter3:name = "None"
        custom string ri:displayfilter4:name = "None"
        custom string ri:displayfilter5:name = "None"
        custom string ri:displayfilter6:name = "None"
        custom string ri:displayfilter7:name = "None"
        custom string ri:displayfilter8:name = "None"
        custom string ri:displayfilter9:name = "None"
        custom int ri:hider:adaptall = 0
        custom string ri:hider:adaptivemetric = "variance"
        custom int ri:hider:bluenoise = 1
        custom float ri:hider:darkfalloff = 0.025
        custom int ri:hider:decidither = 0
        custom float2 ri:hider:exposurebracket = (-1, 1)
        custom int ri:hider:extrememotiondof = 0
        custom int ri:hider:geomShadowTermBias = 1
        custom int ri:hider:maxsamples = 0
        custom int ri:hider:minextrasamples = -1
        custom int ri:hider:minsamples = -1
        custom string ri:hider:pixelfiltermode = "importance"
        custom int ri:hider:samplemotion = 1
        custom int ri:hider:sampleoffset = 0
        custom int ri:hider:samplestride = 1
        custom string ri:hider:type = "raytrace"
        custom string ri:integrator:name = "PxrPathTracer"
        custom int ri:integrator:PxrPathTracer:accumOpacity = 0
        custom int ri:integrator:PxrPathTracer:allowCaustics = 0
        custom int ri:integrator:PxrPathTracer:clampDepth = 2
        custom float ri:integrator:PxrPathTracer:clampLuminance = 10
        custom int ri:integrator:PxrPathTracer:jointSampling = 0
        custom int ri:integrator:PxrPathTracer:maxContinuationLength = -1
        custom int ri:integrator:PxrPathTracer:maxIndirectBounces = 8
        custom int ri:integrator:PxrPathTracer:maxNonStochasticOpacityEvents = 0
        custom int ri:integrator:PxrPathTracer:numBxdfSamples = 1
        custom int ri:integrator:PxrPathTracer:numIndirectSamples = 1
        custom int ri:integrator:PxrPathTracer:numLightSamples = 1
        custom int ri:integrator:PxrPathTracer:rouletteDepth = 4
        custom float ri:integrator:PxrPathTracer:rouletteThreshold = 0.2
        custom string ri:integrator:PxrPathTracer:sampleMode = "bxdf"
        custom string ri:integrator:PxrPathTracer:volumeAggregate = "globalVolumeAggregate"
        custom string ri:integrator:PxrPathTracer:volumeAggregateCamera = ""
        custom string ri:integrator:PxrPathTracer:volumeAggregateIndirect = ""
        custom string ri:integrator:PxrPathTracer:volumeAggregateTransmission = ""
        custom int ri:lighting:selectionlearningscheme = 1
        custom int ri:limits:brickmemory = 2097150
        custom int2 ri:limits:bucketsize = (16, 16)
        custom float ri:limits:deepshadowerror = 0.01
        custom int ri:limits:geocachememory = 2097150
        custom int ri:limits:octreememory = 20480
        custom int ri:limits:opacitycachememory = 1048580
        custom float3 ri:limits:othreshold = (0.99609375, 0.99609375, 0.99609375)
        custom int ri:limits:pointmemory = 20480
        custom int ri:limits:ptexturemaxfiles = 128
        custom int ri:limits:ptexturememory = 32768
        custom float ri:limits:rendermemory = 0
        custom int ri:limits:rendertime = 0
        custom int ri:limits:texturememory = 2097150
        custom float ri:limits:textureperthreadmemoryratio = 0.5
        custom int ri:limits:threads = 0
        custom string ri:lpe:diffuse2 = "Diffuse,HairDiffuse,diffuse,translucent,hair4,irradiance"
        custom string ri:lpe:diffuse3 = "Subsurface,subsurface"
        custom string ri:lpe:specular2 = "Specular,HairSpecularR,specular,hair1"
        custom string ri:lpe:specular3 = "RoughSpecular,HairSpecularTRT,hair3"
        custom string ri:lpe:specular4 = "Clearcoat"
        custom string ri:lpe:specular5 = "Iridescence"
        custom string ri:lpe:specular6 = "Fuzz,HairSpecularGLINTS"
        custom string ri:lpe:specular7 = "SingleScatter,HairSpecularTT,hair2"
        custom string ri:lpe:specular8 = "Glass,specular"
        custom string ri:lpe:user2 = "Albedo,DiffuseAlbedo,SubsurfaceAlbedo,HairAlbedo"
        custom string ri:lpe:user3 = "Position"
        custom string ri:lpe:user4 = "UserColor"
        custom string ri:lpe:user5 = ""
        custom string ri:lpe:user6 = "Normal,DiffuseNormal,HairTangent,SubsurfaceNormal,SpecularNormal,RoughSpecularNormal,SingleScatterNormal,FuzzNormal,IridescenceNormal,GlassNormal"
        custom string ri:lpe:user7 = ""
        custom string ri:lpe:user8 = ""
        custom string ri:lpe:user9 = ""
        custom string ri:lpe:user10 = ""
        custom string ri:lpe:user11 = ""
        custom string ri:lpe:user12 = ""
        custom int ri:osl:batched = 1
        custom int ri:osl:statisticslevel = 0
        custom int ri:osl:verbose = 4
        custom string ri:projection:name = "PxrPerspective"
        custom float ri:projection:PxrPerspective:fovEnd = 0
        custom int ri:Ri:Frame
        int ri:Ri:Frame.timeSamples = {
            1: 1,
        }
        custom float ri:Ri:FrameAspectRatio = -1
        custom float ri:Ri:PixelVariance = 0.015
        custom float2 ri:Ri:Shutter = (0, 0)
        custom string ri:samplefilter0:name = "None"
        custom string ri:samplefilter1:name = "None"
        custom string ri:samplefilter2:name = "None"
        custom string ri:samplefilter3:name = "None"
        custom string ri:samplefilter4:name = "None"
        custom string ri:samplefilter5:name = "None"
        custom string ri:samplefilter6:name = "None"
        custom string ri:samplefilter7:name = "None"
        custom string ri:samplefilter8:name = "None"
        custom string ri:samplefilter9:name = "None"
        custom float ri:shade:roughnessmollification = 1
        custom int ri:shade:shadowBumpTerminator = 1
        custom int ri:statistics:level = 0
        custom float ri:trace:bvhcompression = 0
        custom float3 ri:trace:worldoffset = (0, 0, 0)
        custom string ri:trace:worldorigin = "camera"
        custom string ri:volume:aggregatespace = "world"
    }
}

def Xform "lights"
{
    def DomeLight "domelight1" (
        prepend apiSchemas = ["HoudiniViewportGuideAPI"]
    )
    {
        custom rel filters = None
        float houdini:guidescale.timeSamples = {
            1: 1,
        }
        bool houdini:inviewermenu = 0
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 1
        bool inputs:normalize = 0
        float inputs:specular = 1
        asset inputs:texture:file = @./dome_grid_2k.exr@
        token inputs:texture:format = "latlong"
        rel light:filters = None
        rel portals = None
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

